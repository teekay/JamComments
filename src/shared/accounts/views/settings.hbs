    {{> hamburgerMenu }}
    <main id="main" class="settings">
        <!-- begin main settings container -->
        <section class="settings container">
            <header class="section-header">
                <h1 class="heading-font">Settings</h1>
            </header>
            <!-- begin main settings tab navigation -->
            <div class="tab settings-tabs">
                <button id="btnTabPersonal" class="btn tablinks body-font active"
                    onclick="openSetting(event, 'PERSONAL')">PERSONAL</button>
                <button id="btnTabCommenting" class="btn tablinks body-font" onclick="openSetting(event, 'COMMENTING')">COMMENTING</button>
                <button id="btnTabNotifications" class="btn tablinks body-font"
                    onclick="openSetting(event, 'NOTIFICATIONS')">NOTIFICATIONS</button>
            </div>
            <!-- end main settings tab navigation -->
            <!-- begin tabbed content for Personal Settings -->
            <div id="PERSONAL" class="settings-column tabcontent">
                <div id="username" class="card settings-tab has-button">
                    <div>
                        <h2 class="admin-setting-heading heading-font">Username</h2>
                        <span class="admin-setting-description">Used for signing in</span>
                        <span class="admin-setting-user heading-font">{{ account.username }}</span>
                    </div>
                </div>
                <div id="email" class="card settings-tab has-button">
                    <div>
                        <h2 class="admin-setting-heading heading-font">Email</h2>
                        <span class="admin-setting-description">Used to reset your password and for email notifications,
                            never shared</span>
                        <span class="admin-setting-user heading-font">{{ account.email }}</span>
                        {{#if changeEmailError}}
                        <div class="alert alert-warning mt-2" role="alert">{{ changeEmailError }}</div>
                        {{/if}}
                    </div>
                    <button class="btn update-user-setting update-email">
                        <img class="icon icon-small" src="/assets/images/icons/pencil.svg" alt="Edit your email">
                    </button>
                    
                    <div id="changeEmailModal" class="modal" style="display: none;">
                        <div class="modal-content">
                            <span class="close">&times;</span>
                            <form id="formChangeEmail"
                                  method="POST"
                                  action="/account/email/change">
                                <span class="modal-heading heading-font">Change your email</span>
                                <p class="modal-description body-font">Changet the email for receiving notifications and password resets here.</p>
                                    <input type="hidden" name="_csrf" value="{{csrfToken}}">
                                    <div class="input-group mb-3">
                                    <input type="email" name="email"
                                            placeholder="New e-mail address"
                                            aria-label="New e-mail address"
                                            required/>
                                    </div>
                                <div class="modal-buttons">
                                    <button class="btn hollow-btn close" type="button">CANCEL</button>
                                    <button class="btn brand-btn has-icon admin-setting-button" type="submit">CONFIRM</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                <div id="api-key" class="card settings-tab has-button">
                    <div>
                        <h2 class="admin-setting-heading heading-font">API Key</h2>
                        <span class="admin-setting-description">Use this API key in your integration code to fetch
                            comments from JamComments
                            <div class="tooltip icon"><span class="tooltiptext">(TODO refer to documentation here)</span></div>
                        </span>
                        <span class="admin-setting-user heading-font"><span id="tokenContents">{{ truncate token.token 16 '...' }}</span> <a id="btnCopyToken" href="#"><img src="/assets/images/icons/cil-copy.svg" width="16"></a></span>
                    </div>
                    <button class="btn brand-btn has-icon admin-setting-button refresh-token">GET A NEW TOKEN </button>
                    <!-- begin newToken Modal content -->
                    <div id="newTokenModal" class="modal" style="display: none;">
                        <div class="modal-content">
                            <span id="closeNewToken" class="close closeNewToken">&times;</span>
                            <span class="modal-heading heading-font">Are you sure?</span>
                            <p class="modal-description body-font">If you proceed, copy the new key and rebuild your
                                website immediately. All API calls using the old key will fail from now on.</p>
                            <div class="modal-buttons">
                                <button id="cancelNewToken" class="btn hollow-btn close" type="button">CANCEL</button>
                                <button id="confirmNewToken" type="button"
                                    class="btn brand-btn has-icon admin-setting-button confirm">YES, GO
                                    AHEAD</button>
                            </div>
                        </div>
                    </div>
                    <!-- end newToken Modal content -->
                    <!-- begin newToken confirmed Modal content -->
                    <div id="newTokenModalConfirmed" class="modal" style="display: none;">
                        <div class="modal-content">
                            <img src="/assets/images/icons/success-modal.svg" alt="">
                            <span class="modal-heading heading-font">Success!</span>
                            <p class="modal-description body-font">API key has been reissued.</p>
                            <div class="modal-buttons">
                                <button id="closeTokenModalConfirmed"
                                    class="btn hollow-btn close closeTokenModalConfirmed">OK</button>
                            </div>
                        </div>
                    </div>
                    <!-- end newToken confirmed Modal content -->
                </div>
                <div id="your-data" class="card settings-tab has-button">
                    <div>
                        <h2 class="admin-setting-heading heading-font">Your Data</h2>
                        <span class="admin-setting-description">Download all comments</span>
                    </div>
                    <a href="/account/export" id="downloadComments" class="btn has-icon admin-setting-button">DOWNLOAD COMMENTS</a>
                </div>
                <div id="close-account" class="card settings-tab has-button">
                    <div>
                        <h2 class="admin-setting-heading heading-font">Close your account</h2>
                        <span class="admin-setting-description">You can close your account anytime. Be sure to download
                            your data before</span>
                    </div>
                    <button class="btn brand-btn has-icon admin-setting-button close-account">CLOSE ACCOUNT</button>
                </div>
                <div id="closeAccountModal" class="modal" style="display: none;">
                    <form method="POST" action="/account/close">
                        <input type="hidden" name="_csrf" value="{{csrfToken}}">
                        <div class="modal-content">
                            <span class="close">&times;</span>
                            <span class="modal-heading heading-font">Are you sure?</span>
                            <p class="modal-description body-font">This action is irreversible. All your data will be erased if you continue.</p>
                            <div class="modal-buttons">
                                <button class="btn hollow-btn close" type="button">CANCEL</button>
                                <button class="btn brand-btn has-icon admin-setting-button confirmNewToken" type="submit">YES, GO
                                    AHEAD</button>
                            </div>
                        </div>
                    </form>
                </div>

            </div>
            <!-- end tabbed content for Personal Settings -->
            <!-- begin tabbed content for comment Settings -->
            <div id="COMMENTING" class="settings-column tabcontent">
                <form style="padding:0" method="post" action="/account/settings">
                    <input type="hidden" name="_csrf" value="{{csrfToken}}">
                    <div id="moderation" class="card settings-tab">
                        <div>
                            <h2 class="admin-setting-heading heading-font">Moderation <div class="tooltip icon"><span
                                        class="tooltiptext">Whether you want to approve all comments before they are published</span></div>
                            </h2>
                            <span class="admin-setting-description">Require moderation for all comments <img
                                    class="icon icon-small toggle" src="/assets/images/icons/setting-toggle-{{#if requireModeration }}on{{else }}off{{/if}}.svg"
                                    alt=""/>
                                <input type="checkbox"
                                       value="1"
                                       class="d-none"
                                       name="requireModeration" 
                                       id="requireModeration"{{#if requireModeration}} checked{{/if}}/>
                            </span>
                        </div>
                    </div>
                    <div id="anti-spam" class="card settings-tab">
                        <div>
                            <h2 class="admin-setting-heading heading-font">Anti-Spam <div class="tooltip icon"><span
                                        class="tooltiptext">If you enable Akismet integration, we will check each comment to
                                        determine if it's SPAM or not relying on the Akismet SPAM detection feature.</span>
                                </div>
                            </h2>
                            <span class="admin-setting-description">Use anti-SPAM protection (Akismet) <img
                                    class="icon icon-small toggle" src="/assets/images/icons/setting-toggle-{{#if useAkismet}}on{{else}}off{{/if}}.svg"
                                    alt=""/>
                                    <input type="checkbox" 
                                           value="1"
                                           class="d-none"                                     
                                           name="useAkismet" 
                                           id="useAkismet"{{#if useAkismet}} checked{{/if}}>
                            </span>
                            <input type="text" id="apiKey" name="apiKey" placeholder="Akismet API Key" value="{{ akismetKey }}">
                            <input type="text" id="blogUrl" name="blogUrl" placeholder="Blog URL (required by Akismet)" value="{{ blogUrl }}">
                            <button class="btn" type="submit">SAVE</button>
                        </div>
                    </div>
                </form>
            </div>
            <!-- end tabbed content for comment Settings -->
            <!-- begin tabbed content for comment notifications -->
            <div id="NOTIFICATIONS" class="settings-column tabcontent">
                <form method="POST" action="/account/email/settings" style="padding:0">
                    <input type="hidden" name="_csrf" value="{{csrfToken}}">
                    <div id="notify-new-comments" class="card settings-tab">
                        <h2 class="admin-setting-heading heading-font">Notify me about new comments:</h2>
                        <div class="notify-settings">
                            <div class="notify-setting">
                                <span class="admin-setting-description">As soon as they come in</span>
                                <img class="icon icon-small toggle" src="/assets/images/icons/setting-toggle-{{#if notifyOnComments}}on{{else}}off{{/if}}.svg"
                                    alt=""/>
                                <input type="checkbox"
                                       class="d-none"
                                       id="notifyOnComments"
                                       name="notifyOnComments"{{# if notifyOnComments }} checked{{/if}}>
                            </div>
                            <div class="notify-setting">
                                <span class="admin-setting-description">Send me a daily digest</span>
                                <img class="icon icon-small toggle" src="/assets/images/icons/setting-toggle-{{#if sendCommentsDigest}}on{{else}}off{{/if}}.svg" alt=""/>
                                <input class="d-none"
                                       type="checkbox"
                                       id="sendCommentsDigest"
                                       name="sendCommentsDigest"{{# if sendCommentsDigest }} checked{{/if}}>
                            </div>
                            <button class="btn" type="submit">SAVE</button>
                        </div>
                    </div>
                </form>
            </div>
            <!-- emd tabbed content for comment notifications -->
        </section>
        <!-- end main settings container -->
    </main> 

<script>

    function copyToken(evt) {
        evt.preventDefault();
        let container = evt.target.parentElement;
        let input = document.createElement('input');
        input.type = 'text';
        input.value = '{{ token.token }}';
        container.appendChild(input);
        input.select();
        document.execCommand("copy");
        container.removeChild(input);
    }
    document.getElementById('btnCopyToken').addEventListener('click', copyToken);

    function modalForForm(id) {
        return function openEmailChangeModal(openEvt) {
            let container = document.getElementById(id);
            let closeLinks = Array.from(container.querySelectorAll('.close'));
            container.style.display = 'block';
            function closeModal(evt) {
                container.style.display = 'none';
                closeLinks.forEach(el => el.removeEventListener('click', closeModal));
            }
            closeLinks.forEach(el => el.addEventListener('click', closeModal));
        }
    }

    function reissueApiKeyModal() {
        let container = document.getElementById('newTokenModal');
        let reissueApiKeyModalConfirmed = document.getElementById('newTokenModalConfirmed');
        let closeLinks = Array.from(container.querySelectorAll('.close'));
        container.style.display = 'block';

        function closeModal(evt) {
            container.style.display = 'none';
            closeLinks.forEach(el => el.removeEventListener('click', closeModal));
        }
       
        function reissueApiKey(evt) {
            let token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            fetch('/account/settings/token/refresh', {
                method: 'POST',
                headers: {
                    'CSRF-Token': token,
                    'content-type': 'application/json'
                }
                }).then(response => {
                if (response.status === 201) {
                    container.querySelector('.confirm').removeEventListener('click', reissueApiKey);
                    closeLinks.forEach(el => el.removeEventListener('click', closeModal));
                    container.style.display = 'none';
                    reissueApiKeyModalConfirmed.style.display = 'block';
                    response.json().then(body => {
                        document.getElementById('tokenContents').innerHTML = body.token?.substring(0, 16) + '...';
                    });
                    
                    return;
                }
                console.error(response.status);
                // TODO show error message
            });
        }

        container.querySelector('.confirm').addEventListener('click', reissueApiKey);
        closeLinks.forEach(el => el.addEventListener('click', closeModal));
    }

    document.querySelector('.update-email').addEventListener('click', modalForForm('changeEmailModal'));
    document.querySelector('.close-account').addEventListener('click', modalForForm('closeAccountModal'));
    document.querySelector('.refresh-token').addEventListener('click', reissueApiKeyModal);
    document.getElementById('closeTokenModalConfirmed').addEventListener('click', function(evt) {
        document.getElementById('newTokenModalConfirmed').style.display = 'none';
    })

    function openSetting(evt, settingName) {
        // Get all elements with class="tabcontent" and hide them
        let tabcontent = Array.from(document.getElementsByClassName("tabcontent"));
        tabcontent.forEach(tab => {
            tab.style.display = "none";
            tab.style.opacity = "0";
        });

        // Get all elements with class="tablinks" and remove the class "active"
        let tablinks = Array.from(document.getElementsByClassName("tablinks"));
        tablinks.forEach(link => {
            link.classList.remove("active");
        });

        // Show the current tab, and add an "active" class to the button that opened the tab
        let tabHeader = document.getElementById(settingName);
        tabHeader.style.display = "flex";
        tabHeader.style.opacity = "1";
        evt.currentTarget.classList.add("active");
    }

    function toggleSetting(evt) {
        let on = '-on';
        let off = '-off';
        let icon = evt.target;
        let input = icon.parentElement.querySelector('input[type=checkbox]');
        input.click();
        let [from, to] = input.checked ? [off, on] : [on, off];
        icon.src = icon.src.replace(from, to);
    }
    Array.from(document.querySelectorAll('.toggle')).forEach(ev => ev.addEventListener('click', toggleSetting));
    document.getElementById('useAkismet').addEventListener('change', function(evt) {
        let isOn = evt.target.checked;
        let inputApiKey = document.getElementById('apiKey');
        let inputBlogUrl = document.getElementById('blogUrl');
        if (isOn) {
            inputApiKey.setAttribute('required', 'required');
            inputBlogUrl.setAttribute('required', 'required');
        } else {
            inputApiKey.removeAttribute('required');
            inputBlogUrl.removeAttribute('required');
        }
    });

  // remember tabs
  document.querySelectorAll('button.tablinks')
    .forEach(b => 
      b.addEventListener('click', ev => 
        localStorage.setItem('lastSettingsTab', ev.target.id)));

(function() {
    let lastTab = localStorage.getItem('lastSettingsTab');
    let btn = document.querySelector(lastTab ? `#${lastTab}` : '#btnTabPersonal');
    btn.click();
})()
</script>

{{#if blogUrl }}
<script>
  document.querySelector('#checkAkismetKey').addEventListener('click', function() {
    let token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    let key = document.querySelector('#akismetKey').value;
    let infoBox = document.querySelector('#akismetKeyCheckResult');
    let resultMsg = ''
    fetch('/account/settings/akismet/verify', {
      method: 'POST',
      headers: {
        'CSRF-Token': token
      }
    }).then(response => {
      switch(response.status) {
        case 200:
          console.log('Key is OK');
          resultMsg = '<i class="cil-thumb-up"></i>';
          break;
        case 400:
          console.log('Failed precondition')
          resultMsg = '<i class="cil-exclamation-circle"></i>';
          break;
        case 403:
          console.log('Key is no good');
          resultMsg = '<i class="cil-thumb-down"></i>';
          break;
        case 503:
          console.log('Could not reach Akismet')
          resultMsg = '<i class="cil-exclamation-circle"></i>';
          break;
        default:
          console.warn(`Programmer error? ${response.status}`);
          resultMsg = '<i class="cis-warning"></i>';
      }
      infoBox.innerHTML = resultMsg;
    })
  })
</script>
{{/if}}